"""
Django settings for meshtastic_dashboard project.

Generated by 'django-admin startproject' using Django X.Y.Z. # Passen Sie dies ggf. an
For more information on this file, see
https://docs.djangoproject.com/en/stable/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/stable/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR sollte auf das Verzeichnis zeigen, das manage.py enthält.
# Wenn Ihre settings.py in meshtastic_dashboard/meshtastic_dashboard/settings.py liegt:
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/stable/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# ERSETZEN SIE DIESEN SCHLÜSSEL UNBEDINGT!
SECRET_KEY = 'django-insecure-ihr-super-geheimer-schluessel-hier-einfuegen'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    'Ihre_Server_IP_Adresse', # Die IP-Adresse Ihres Servers
    'localhost', # Für lokale Tests auf dem Server
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mqtt_listener',  # Ihre App
    # Fügen Sie hier ggf. weitere Apps hinzu (z.B. 'rest_framework')
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meshtastic_dashboard.urls' # Geht davon aus, dass Ihre Haupt-urls.py in meshtastic_dashboard/urls.py liegt

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Falls Sie ein globales Template-Verzeichnis haben
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION gibt an, wo sich die wsgi.py Datei befindet.
# Wenn Ihre wsgi.py in meshtastic_dashboard/meshtastic_dashboard/wsgi.py liegt:
WSGI_APPLICATION = 'meshtastic_dashboard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/stable/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'meshtastic_db',           # Wie in Schritt 3 erstellt
        'USER': 'meshtastic_user',        # Wie in Schritt 3 erstellt
        'PASSWORD': '<PASSWORD>.', # Ihr PostgreSQL-Passwort
        'HOST': 'localhost',              # Oder die IP des DB-Servers
        'PORT': '5432',                   # Standard-PostgreSQL-Port
    }
}


# Password validation
# https://docs.djangoproject.com/en/stable/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/stable/topics/i18n/

LANGUAGE_CODE = 'de-de' # Oder 'en-us' etc.

TIME_ZONE = 'Europe/Berlin' # Passen Sie dies an Ihre Zeitzone an

USE_I18N = True

USE_L10N = True # Legacy-Einstellung für Lokalisierungsformate, oft synonym zu USE_I18N

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/stable/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/meshtastic_app/staticfiles' # Verzeichnis für 'collectstatic'

# Zusätzliche Verzeichnisse für statische Dateien (falls Ihre App-Struktur dies erfordert)
# STATICFILES_DIRS = [
#     BASE_DIR / "static", # Falls Sie ein globales 'static'-Verzeichnis haben
# ]

# Media files (User-uploaded files) - falls benötigt
# MEDIA_URL = '/media/'
# MEDIA_ROOT = '/var/www/meshtastic_app/mediafiles' # Verzeichnis für hochgeladene Dateien


# Default primary key field type
# https://docs.djangoproject.com/en/stable/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# MQTT Broker Settings (WICHTIG für listen_mqtt.py)
# Diese Einstellungen müssen Sie an Ihren MQTT-Broker anpassen.
# Die Namen der Variablen (MQTT_BROKER_HOST etc.) sind Beispiele.
# Ihr listen_mqtt.py Skript muss diese Variablen dann auch verwenden (z.B. via django.conf.settings).
MQTT_BROKER = 'localhost'  # z.B. 'localhost' oder eine IP/Domain
MQTT_PORT = 1883                  # Standard MQTT Port (oder 8883 für TLS)
MQTT_USERNAME = 'metrastics'      # Optional, falls Ihr Broker Authentifizierung erfordert
MQTT_PASSWORD = 'large4cats'      # Optional
MQTT_CLIENT_ID = 'meshtastic_dashboard_listener' # Einzigartige Client-ID
MQTT_TOPIC = 'msh//2/json/#'                # Das Topic-Präfix, das von Meshtastic verwendet wird
MQTT_KEEPALIVE = 60
# MQTT_USE_TLS = False                   # Setzen Sie dies auf True, wenn Sie TLS verwenden
# MQTT_TLS_CA_CERTS = "/pfad/zu/ca.crt"  # Falls benötigt für TLS
# MQTT_TLS_CERTFILE = "/pfad/zu/client.crt" # Falls Client-Zertifikat benötigt wird
# MQTT_TLS_KEYFILE = "/pfad/zu/client.key"   # Falls Client-Schlüssel benötigt wird

# Logging Configuration (Empfohlen für Produktion)
# Beispielkonfiguration, die in eine Datei schreibt und Admins bei Fehlern benachrichtigt
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'WARNING', # Loggt WARNING, ERROR, CRITICAL
            'class': 'logging.handlers.RotatingFileHandler', # Rotiert Log-Dateien
            'filename': BASE_DIR / 'logs/django_production.log', # Stellen Sie sicher, dass das Verzeichnis 'logs' existiert und beschreibbar ist
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': { # Für lokale Entwicklung oder wenn Sie Logs an stdout/stderr weiterleiten
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # 'mail_admins': { # Aktivieren, um Fehler per E-Mail zu erhalten
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'formatter': 'verbose',
        # }
    },
    'root': { # Root-Logger
        'handlers': ['file'], # Fügen Sie 'mail_admins' hinzu, wenn konfiguriert
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['file'], # Fügen Sie 'mail_admins' hinzu, wenn konfiguriert
            'level': 'WARNING',
            'propagate': False,
        },
        'mqtt_listener': { # Spezifischer Logger für Ihre App
            'handlers': ['file'], # Oder ein separater Handler
            'level': 'INFO', # Passen Sie das Level nach Bedarf an
            'propagate': False,
        }
    },
}

# E-Mail-Einstellungen (für Admin-Fehlerberichte und andere Benachrichtigungen)
# Ersetzen Sie diese durch Ihre tatsächlichen E-Mail-Server-Einstellungen
# ADMINS = [('Ihr Name', 'ihre-email@example.com')] # Für Fehlerberichte
# MANAGERS = ADMINS

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'ihr-smtp-benutzer@example.com'
# EMAIL_HOST_PASSWORD = 'ihr-smtp-passwort'
# DEFAULT_FROM_EMAIL = 'webmaster@metrastics.com'
# SERVER_EMAIL = 'server-errors@metrastics.com' # Absender für Fehler-E-Mails

# CSRF-Schutz für HTTPS
# Wenn Sie HTTPS verwenden (was dringend empfohlen wird), sind diese Einstellungen wichtig.
# SESSION_COOKIE_SECURE = True # Nur über HTTPS senden
# CSRF_COOKIE_SECURE = True    # Nur über HTTPS senden
# SECURE_SSL_REDIRECT = True   # Alle HTTP-Anfragen auf HTTPS umleiten (wenn der Proxy dies nicht bereits tut)
# SECURE_HSTS_SECONDS = 31536000 # 1 Jahr - teilt Browsern mit, nur HTTPS zu verwenden
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# Für CSRF_TRUSTED_ORIGINS, wenn Sie HTTPS verwenden und Ihre Domain `metrastics.com` ist:
CSRF_TRUSTED_ORIGINS = ['https://metrastics.com', 'https://www.metrastics.com']
